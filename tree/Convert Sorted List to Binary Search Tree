# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        #stop condition
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)

        
        slow = fast = head
        before_slow = None
        # find the middle and end
        while fast and fast.next:
            # Initialize two pointers, one will go one step a time (slow), another two at a time (fast)
            before_slow = slow
            slow = slow.next
            fast = fast.next.next
            
        # find the root of the tree
        root = TreeNode(slow.val) 
        
        #recursive
        root.right = self.sortedListToBST(slow.next)
        
        #cut the linked list
        if before_slow:
            before_slow.next = None
        
        #recursive
        root.left = self.sortedListToBST(head)
    
        return root   
