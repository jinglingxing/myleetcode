'''You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.Example:Input: 4Output: false Explanation: If there are 4 stones in the heap, then you will never win the game;             No matter 1, 2, or 3 stones you remove, the last stone will always be              removed by your friend.             '''class Solution:    def canWinNim(self, n: int) -> bool:#solution 1: It is obvious that the same pattern repeats itself for n=4,8,12,16.... basically all multiples of 4.        return n%4!=0#solution 2: dynamic programming(caused time limit exceeded problem)# the ith number is true or not depends on the i-1 and i-2 and i-3 numbers. If i-1, i-2, i-3 can reach i which means your friend can win at ith number#        res = [False] * (n+1)#        if n>=3:#            res[1] = res[2] = res[3] = True#            for i in range(4,n+1):#                res[i] = not res[i-1] or not res[i-2] or not res[i-3]                #            return res[-1]#        else:#            return Truesol = Solution()n=4sol.canWinNim(n)